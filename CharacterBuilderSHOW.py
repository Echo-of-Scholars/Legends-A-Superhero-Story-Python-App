# -*- coding: utf-8 -*-
import sys
import random
import json

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot, pyqtSignal, Qt, QTextStream, QFile
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtWidgets import QStyleFactory
from calculateLvls import calculateLvls
from charstore import save_character, load_character


# Form implementation generated from reading ui file 'CharacterBuilder2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

class ThemedWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # Main widget
        self.main_widget = QWidget()
        self.setCentralWidget(self.main_widget)

        # Layout
        self.layout = QVBoxLayout(self.main_widget)


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        #TODO: Still not working, says there is a unicode error.
        #icon = QIcon('C:\Users\Echo\Pictures\Legendsscreen.ico')
        #MainWindow.setWindowIcon(icon)
        self.statstracker = None
        self.durability_widgets = []

        self.AtierPwrs = {
            "Cost": [4, 6],
            "Name": ['Absorption', 'Adaption', 'Animal Powers', 'A – Charisma', 'A – Agility', 'A – Stamina',
                     'A – Intelligence', 'A – Senses', 'A – Speed', 'A – Strength', 'Clairvoyance', 'Constructs',
                     'Dimensional Travel', 'Earth Control', 'Gravity Control', 'Immortality', 'Invulnerability',
                     'Magic Spells', 'Mimic', 'Mind Control', 'Resurrection', 'Shape Shifting', 'Time Manipulation',
                     'Transmutation', 'Weather Control']
        }
        self.BtierPwrs = {
            "Cost": [2, 4],
            "Name": ['Animal Control', 'Armour', 'Astral Projection',
                     'B – Charisma', 'B – Agility', 'B – Stamina', 'B – Intelligence', 'B – Senses', 'B – Speed',
                     'B – Strength', 'Darkness Control', 'Density Manipulation', 'Disruption', 'Duplication',
                     'Empowerment', 'Energize', 'Enhanced Prosthetic', 'Flame', 'Flight', 'Force Field', 'Guardian',
                     'Harm', 'Healing', 'Ice', 'Illusions', 'Interface', 'Invisibility', 'Light Control', 'Lightning',
                     'Luck', 'Material Absorption', 'Metal Control', 'Mind Manipulation', 'Phasing', 'Plant Control',
                     'Power Blasts', 'Precision', 'Precognition', 'Psionics', 'Regeneration', 'Resistance',
                     'Self-Molecular Manipulation', 'Size Change', 'Sonic', 'Specialized Magic Item/Gadget',
                     'Specialized Weapon', 'Stretching', 'Telekinesis', 'Teleportation', 'Unique Power']
        }
        self.CtierPwrs = {
            "Cost": [1, 2],
            "Name": ['C – Charisma', 'C – Agility', 'C – Stamina', 'C – Intelligence', 'C – Senses', 'C – Speed',
                     'C – Strength', 'Combat Training', 'Emotion Manipulation', 'Envenom', 'Fight Training',
                     'First Aid', 'Gadgets/Magic Items', 'Glide', 'Jump', 'Money', 'Natural Weapon', 'Ray',
                     'Species/Genetic Power', 'Telepathy', 'Tough', 'Vehicle', 'Weapon', 'Weapons Training',
                     'Willpower']
        }

        allpwrnames = self.AtierPwrs["Name"] + self.BtierPwrs["Name"] + self.CtierPwrs["Name"]
        pwrnames = list(set(allpwrnames))

        durability_names = ['Blunt', 'Disruption', 'Earth', 'Fall', 'Fire', "Force Fields", 'Ice',
                            'Light', 'Lightning', 'Piercing', 'Poison', 'Power', 'Psychic', 'Slashing',
                            'Sonic']



        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(685, 805)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.NewHeroBut = QtWidgets.QPushButton(self.centralwidget)
        self.NewHeroBut.setGeometry(QtCore.QRect(40, 20, 75, 23))
        self.NewHeroBut.setObjectName("NewHeroBut")
        self.NewHeroBut.clicked.connect(lambda: self.newchar())
        self.SaveHeroBut = QtWidgets.QPushButton(self.centralwidget)
        self.SaveHeroBut.setGeometry(QtCore.QRect(127, 20, 75, 23))
        self.SaveHeroBut.setObjectName("SaveHeroBut")
        self.SaveHeroBut.clicked.connect(lambda: self.savchar())
        self.LoadSheetBut = QtWidgets.QPushButton(self.centralwidget)
        self.LoadSheetBut.setGeometry(QtCore.QRect(40, 50, 75, 23))
        self.LoadSheetBut.setObjectName("LoadSheetBut")
        self.LoadSheetBut.clicked.connect(lambda: self.loachar())
        self.RanGenBut = QtWidgets.QPushButton(self.centralwidget)
        self.RanGenBut.setGeometry(QtCore.QRect(40, 75, 161, 23))
        self.RanGenBut.setObjectName("RanGenBut")
        self.RanGenBut.clicked.connect(lambda: self.comingsoon())
        self.ExitBut = QtWidgets.QPushButton(self.centralwidget)
        self.ExitBut.setGeometry(QtCore.QRect(40, 130, 161, 23))
        self.ExitBut.setObjectName("ExitBut")
        self.ExitBut.clicked.connect(self.exitprogram)

        self.abiSec = QtWidgets.QFrame(self.centralwidget)
        self.abiSec.setGeometry(QtCore.QRect(240, 160, 431, 261))
        self.abiSec.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.abiSec.setFrameShadow(QtWidgets.QFrame.Raised)
        self.abiSec.setObjectName("abiSec")
        self.secAbiLab = QtWidgets.QLabel(self.abiSec)
        self.secAbiLab.setGeometry(QtCore.QRect(150, 0, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.secAbiLab.setFont(font)
        self.secAbiLab.setAlignment(QtCore.Qt.AlignCenter)
        self.secAbiLab.setObjectName("secAbiLab")
        self.abiTXT = QtWidgets.QTextBrowser(self.abiSec)
        self.abiTXT.setGeometry(QtCore.QRect(0, 30, 431, 231))
        self.abiTXT.setMouseTracking(True)
        self.abiTXT.setTabletTracking(True)
        self.abiTXT.setAutoFormatting(QtWidgets.QTextEdit.AutoAll)
        self.abiTXT.setUndoRedoEnabled(True)
        self.abiTXT.setReadOnly(False)
        self.abiTXT.setObjectName("abiTXT")
        self.pwrSec = QtWidgets.QFrame(self.centralwidget)
        self.pwrSec.setGeometry(QtCore.QRect(20, 160, 201, 261))
        self.pwrSec.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.pwrSec.setFrameShadow(QtWidgets.QFrame.Raised)
        self.pwrSec.setObjectName("pwrSec")
        self.secPwrLab = QtWidgets.QLabel(self.pwrSec)
        self.secPwrLab.setGeometry(QtCore.QRect(20, 10, 161, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)

        self.secPwrLab.setFont(font)
        self.secPwrLab.setMouseTracking(True)
        self.secPwrLab.setTabletTracking(True)
        self.secPwrLab.setAlignment(QtCore.Qt.AlignCenter)
        self.secPwrLab.setObjectName("secPwrLab")

        self.pwrSRHLE = QtWidgets.QLineEdit(self.pwrSec)
        self.pwrSRHLE.setGeometry(QtCore.QRect(0, 40, 201, 20))
        self.pwrSRHLE.setInputMask("")
        self.pwrSRHLE.setText("")
        self.pwrSRHLE.setAlignment(QtCore.Qt.AlignCenter)
        self.pwrSRHLE.setDragEnabled(False)
        self.pwrSRHLE.setClearButtonEnabled(True)
        self.pwrSRHLE.setObjectName("pwrSRHLE")
        self.pwrSRHLE.returnPressed.connect(self.powerlisting)
        self.completer = QtWidgets.QCompleter(pwrnames)
        self.completer.setCaseSensitivity(False)
        self.pwrSRHLE.setCompleter(self.completer)

        self.pwrArea = QtWidgets.QListWidget(self.pwrSec)
        self.pwrArea.setGeometry(QtCore.QRect(0, 70, 201, 191))
        self.pwrArea.setObjectName("pwrArea")
        self.pwrArea.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        self.pwrArea.itemClicked.connect(self.deletePower)

        self.skiSec = QtWidgets.QFrame(self.centralwidget)
        self.skiSec.setGeometry(QtCore.QRect(20, 430, 241, 221))
        self.skiSec.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.skiSec.setFrameShadow(QtWidgets.QFrame.Raised)
        self.skiSec.setObjectName("skiSec")
        self.secSKLLab = QtWidgets.QLabel(self.skiSec)
        self.secSKLLab.setGeometry(QtCore.QRect(-4, 0, 241, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.secSKLLab.setFont(font)
        self.secSKLLab.setAlignment(QtCore.Qt.AlignCenter)
        self.secSKLLab.setObjectName("secSKLLab")
        self.gridWidget_3 = QtWidgets.QWidget(self.skiSec)
        self.gridWidget_3.setGeometry(QtCore.QRect(0, 20, 241, 201))
        self.gridWidget_3.setObjectName("gridWidget_3")
        self.gridLayout = QtWidgets.QGridLayout(self.gridWidget_3)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.intLab = QtWidgets.QLabel(self.gridWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.intLab.setFont(font)
        self.intLab.setAlignment(QtCore.Qt.AlignCenter)
        self.intLab.setObjectName("intLab")
        self.gridLayout.addWidget(self.intLab, 3, 0, 1, 1)
        self.spdLab = QtWidgets.QLabel(self.gridWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.spdLab.setFont(font)
        self.spdLab.setAlignment(QtCore.Qt.AlignCenter)
        self.spdLab.setObjectName("spdLab")
        self.gridLayout.addWidget(self.spdLab, 5, 0, 1, 1)
        self.senLab = QtWidgets.QLabel(self.gridWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.senLab.setFont(font)
        self.senLab.setAlignment(QtCore.Qt.AlignCenter)
        self.senLab.setObjectName("senLab")
        self.gridLayout.addWidget(self.senLab, 4, 0, 1, 1)
        self.staLab = QtWidgets.QLabel(self.gridWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.staLab.setFont(font)
        self.staLab.setAlignment(QtCore.Qt.AlignCenter)
        self.staLab.setObjectName("staLab")
        self.gridLayout.addWidget(self.staLab, 6, 0, 1, 1)
        self.strLab = QtWidgets.QLabel(self.gridWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.strLab.setFont(font)
        self.strLab.setAlignment(QtCore.Qt.AlignCenter)
        self.strLab.setObjectName("strLab")
        self.gridLayout.addWidget(self.strLab, 7, 0, 1, 1)
        self.unpowLab = QtWidgets.QLabel(self.gridWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.unpowLab.setFont(font)
        self.unpowLab.setAlignment(QtCore.Qt.AlignCenter)
        self.unpowLab.setObjectName("unpowLab")
        self.gridLayout.addWidget(self.unpowLab, 0, 1, 1, 1)
        self.skillLab = QtWidgets.QLabel(self.gridWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.skillLab.setFont(font)
        self.skillLab.setAlignment(QtCore.Qt.AlignCenter)
        self.skillLab.setObjectName("skillLab")
        self.gridLayout.addWidget(self.skillLab, 0, 0, 1, 1)
        self.powLab = QtWidgets.QLabel(self.gridWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.powLab.setFont(font)
        self.powLab.setAlignment(QtCore.Qt.AlignCenter)
        self.powLab.setObjectName("powLab")
        self.gridLayout.addWidget(self.powLab, 0, 2, 1, 1)
        self.agiLab = QtWidgets.QLabel(self.gridWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.agiLab.setFont(font)
        self.agiLab.setAlignment(QtCore.Qt.AlignCenter)
        self.agiLab.setObjectName("agiLab")
        self.gridLayout.addWidget(self.agiLab, 1, 0, 1, 1)
        self.chaLab = QtWidgets.QLabel(self.gridWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.chaLab.setFont(font)
        self.chaLab.setAlignment(QtCore.Qt.AlignCenter)
        self.chaLab.setObjectName("chaLab")
        self.gridLayout.addWidget(self.chaLab, 2, 0, 1, 1)
        self.unPowAGLSPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.unPowAGLSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.unPowAGLSPN.setMaximum(15)
        self.unPowAGLSPN.setObjectName("unPowAGLSPN")
        self.unPowAGLSPN.valueChanged.connect(lambda: self.skillCalAGL())
        self.unPowAGLSPN.valueChanged.connect(lambda: self.wrapperIni())
        self.unPowAGLSPN.valueChanged.connect(lambda: self.trueunAGL())
        self.gridLayout.addWidget(self.unPowAGLSPN, 1, 1, 1, 1)
        self.powAGLSPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.powAGLSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.powAGLSPN.setMaximum(30)
        self.powAGLSPN.setObjectName("powAGLSPN")
        self.powAGLSPN.valueChanged.connect(lambda: self.skillCalAGL())
        self.powAGLSPN.valueChanged.connect(lambda: self.wrapperIni())
        self.powAGLSPN.valueChanged.connect(lambda: self.trueAGL())
        self.gridLayout.addWidget(self.powAGLSPN, 1, 2, 1, 1)
        self.unpowCHASPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.unpowCHASPN.setAlignment(QtCore.Qt.AlignCenter)
        self.unpowCHASPN.setMaximum(15)
        self.unpowCHASPN.setObjectName("unpowCHASPN")
        self.unpowCHASPN.valueChanged.connect(lambda: self.skillcalsCHA())
        self.gridLayout.addWidget(self.unpowCHASPN, 2, 1, 1, 1)
        self.powCHASPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.powCHASPN.setAlignment(QtCore.Qt.AlignCenter)
        self.powCHASPN.setMaximum(30)
        self.powCHASPN.setObjectName("powCHASPN")
        self.powCHASPN.valueChanged.connect(lambda: self.skillcalsCHA())
        self.gridLayout.addWidget(self.powCHASPN, 2, 2, 1, 1)
        self.unpowINTSPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.unpowINTSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.unpowINTSPN.setMaximum(15)
        self.unpowINTSPN.setObjectName("unpowINTSPN")
        self.unpowINTSPN.valueChanged.connect(lambda: self.skillcalsINT())
        self.unpowINTSPN.valueChanged.connect(lambda: self.wrapperAcc())
        self.unpowINTSPN.valueChanged.connect(lambda: self.trueunINT())
        self.gridLayout.addWidget(self.unpowINTSPN, 3, 1, 1, 1)
        self.powINTSPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.powINTSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.powINTSPN.setMaximum(30)
        self.powINTSPN.setObjectName("powINTSPN")
        self.powINTSPN.editingFinished.connect(self.skillcalsINT)
        self.powINTSPN.editingFinished.connect(self.wrapperAcc)
        self.powINTSPN.editingFinished.connect(self.trueINT)
        self.powINTSPN.valueChanged.connect(lambda: self.skillcalsINT())
        self.powINTSPN.valueChanged.connect(lambda: self.wrapperAcc())
        self.powINTSPN.valueChanged.connect(lambda: self.trueINT())
        self.gridLayout.addWidget(self.powINTSPN, 3, 2, 1, 1)
        self.unpowSENSPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.unpowSENSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.unpowSENSPN.setMaximum(15)
        self.unpowSENSPN.setObjectName("unpowSENSPN")
        self.unpowSENSPN.valueChanged.connect(lambda: self.skillcalsSEN())
        self.unpowSENSPN.valueChanged.connect(lambda: self.wrapperAcc())
        self.unpowSENSPN.valueChanged.connect(lambda: self.wrapperDef())
        self.unpowSENSPN.valueChanged.connect(lambda: self.trueunSEN())
        self.gridLayout.addWidget(self.unpowSENSPN, 4, 1, 1, 1)
        self.powSENSPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.powSENSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.powSENSPN.setMaximum(30)
        self.powSENSPN.setObjectName("powSENSPN")
        self.powSENSPN.valueChanged.connect(lambda: self.skillcalsSEN())
        self.powSENSPN.valueChanged.connect(lambda: self.wrapperAcc())
        self.powSENSPN.valueChanged.connect(lambda: self.wrapperDef())
        self.powSENSPN.valueChanged.connect(lambda: self.trueSen())
        self.gridLayout.addWidget(self.powSENSPN, 4, 2, 1, 1)
        self.unpowSPDSPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.unpowSPDSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.unpowSPDSPN.setMaximum(15)
        self.unpowSPDSPN.setObjectName("unpowSPDSPN")
        self.unpowSPDSPN.valueChanged.connect(lambda: self.skillcalsSPD())
        self.unpowSPDSPN.valueChanged.connect(lambda: self.wrapperIni())
        self.unpowSPDSPN.valueChanged.connect(lambda: self.trueunSPD())
        self.gridLayout.addWidget(self.unpowSPDSPN, 5, 1, 1, 1)
        self.powSPDSPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.powSPDSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.powSPDSPN.setMaximum(30)
        self.powSPDSPN.setObjectName("powSPDSPN")
        self.powSPDSPN.valueChanged.connect(lambda: self.skillcalsSPD())
        self.powSPDSPN.valueChanged.connect(lambda: self.wrapperIni())
        self.powSPDSPN.valueChanged.connect(lambda: self.trueSPD())
        self.gridLayout.addWidget(self.powSPDSPN, 5, 2, 1, 1)
        self.unpowSTASPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.unpowSTASPN.setAlignment(QtCore.Qt.AlignCenter)
        self.unpowSTASPN.setMaximum(15)
        self.unpowSTASPN.setObjectName("unpowSTASPN")
        self.unpowSTASPN.valueChanged.connect(lambda: self.skillcalsSTA())
        self.unpowSTASPN.valueChanged.connect(lambda: self.wrapperHPSP())
        self.unpowSTASPN.valueChanged.connect(lambda: self.trueunSTA())
        self.gridLayout.addWidget(self.unpowSTASPN, 6, 1, 1, 1)
        self.powSTASPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.powSTASPN.setAlignment(QtCore.Qt.AlignCenter)
        self.powSTASPN.setMaximum(30)
        self.powSTASPN.setObjectName("powSTASPN")
        self.powSTASPN.valueChanged.connect(lambda: self.skillcalsSTA())
        self.powSTASPN.valueChanged.connect(lambda: self.wrapperHPSP())
        self.powSTASPN.valueChanged.connect(lambda: self.trueSTA())
        self.gridLayout.addWidget(self.powSTASPN, 6, 2, 1, 1)
        self.unpowSTRSPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.unpowSTRSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.unpowSTRSPN.setMaximum(15)
        self.unpowSTRSPN.setObjectName("unpowSTRSPN")
        self.unpowSTRSPN.valueChanged.connect(lambda: self.skillcalsSTR())
        self.unpowSTRSPN.valueChanged.connect(lambda: self.wrapperHPSP())
        self.unpowSTRSPN.valueChanged.connect(lambda: self.trueunSTR())
        self.gridLayout.addWidget(self.unpowSTRSPN, 7, 1, 1, 1)
        self.powSTRSPN = QtWidgets.QSpinBox(self.gridWidget_3)
        self.powSTRSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.powSTRSPN.setMaximum(30)
        self.powSTRSPN.setObjectName("powSTRSPN")
        self.powSTRSPN.valueChanged.connect(lambda: self.skillcalsSTR())
        self.powSTRSPN.valueChanged.connect(lambda: self.wrapperHPSP())
        self.powSTRSPN.valueChanged.connect(lambda: self.trueSTR())
        self.gridLayout.addWidget(self.powSTRSPN, 7, 2, 1, 1)

        self.skillboxes = [self.unPowAGLSPN, self.powAGLSPN, self.unpowCHASPN, self.powCHASPN, self.unpowINTSPN,
                           self.powINTSPN, self.unpowSENSPN, self.powSENSPN, self.unpowSPDSPN, self.powSPDSPN,
                           self.unpowSTASPN, self.powSTASPN, self.unpowSTRSPN, self.powSTRSPN]

        self.comtruSec = QtWidgets.QFrame(self.centralwidget)
        self.comtruSec.setGeometry(QtCore.QRect(260, 430, 411, 371))
        self.comtruSec.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.comtruSec.setFrameShadow(QtWidgets.QFrame.Raised)
        self.comtruSec.setObjectName("comtruSec")
        self.secComAttLab = QtWidgets.QLabel(self.comtruSec)
        self.secComAttLab.setGeometry(QtCore.QRect(-4, 0, 431, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.secComAttLab.setFont(font)
        self.secComAttLab.setAlignment(QtCore.Qt.AlignCenter)
        self.secComAttLab.setObjectName("secComAttLab")
        self.gridFrame_4 = QtWidgets.QFrame(self.comtruSec)
        self.gridFrame_4.setGeometry(QtCore.QRect(0, 30, 411, 121))
        self.gridFrame_4.setObjectName("gridFrame_4")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridFrame_4)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.curAPSPN = QtWidgets.QSpinBox(self.gridFrame_4)
        self.curAPSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.curAPSPN.setMaximum(9999)
        self.curAPSPN.setObjectName("curAPSPN")
        self.gridLayout_2.addWidget(self.curAPSPN, 3, 1, 1, 1)
        self.maxHPSPN = QtWidgets.QSpinBox(self.gridFrame_4)
        self.maxHPSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.maxHPSPN.setMaximum(9999)
        self.maxHPSPN.setObjectName("maxHPSPN")
        self.gridLayout_2.addWidget(self.maxHPSPN, 1, 2, 1, 1)
        self.curSPSPN = QtWidgets.QSpinBox(self.gridFrame_4)
        self.curSPSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.curSPSPN.setMaximum(9999)
        self.curSPSPN.setObjectName("curSPSPN")
        self.gridLayout_2.addWidget(self.curSPSPN, 2, 1, 1, 1)
        self.maxPTsLAB = QtWidgets.QLabel(self.gridFrame_4)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.maxPTsLAB.setFont(font)
        self.maxPTsLAB.setAlignment(QtCore.Qt.AlignCenter)
        self.maxPTsLAB.setObjectName("maxPTsLAB")
        self.gridLayout_2.addWidget(self.maxPTsLAB, 0, 2, 1, 1)
        self.hitPTsLAB = QtWidgets.QLabel(self.gridFrame_4)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.hitPTsLAB.setFont(font)
        self.hitPTsLAB.setAlignment(QtCore.Qt.AlignCenter)
        self.hitPTsLAB.setObjectName("hitPTsLAB")
        self.gridLayout_2.addWidget(self.hitPTsLAB, 1, 0, 1, 1)
        self.staPTsLAB = QtWidgets.QLabel(self.gridFrame_4)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.staPTsLAB.setFont(font)
        self.staPTsLAB.setAlignment(QtCore.Qt.AlignCenter)
        self.staPTsLAB.setObjectName("staPTsLAB")
        self.gridLayout_2.addWidget(self.staPTsLAB, 2, 0, 1, 1)
        self.armorPTsLAB = QtWidgets.QLabel(self.gridFrame_4)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.armorPTsLAB.setFont(font)
        self.armorPTsLAB.setAlignment(QtCore.Qt.AlignCenter)
        self.armorPTsLAB.setObjectName("armorPTsLAB")
        self.gridLayout_2.addWidget(self.armorPTsLAB, 3, 0, 1, 1)
        self.curHPSPN = QtWidgets.QSpinBox(self.gridFrame_4)
        self.curHPSPN.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.curHPSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.curHPSPN.setMaximum(9999)
        self.curHPSPN.setObjectName("curHPSPN")
        self.gridLayout_2.addWidget(self.curHPSPN, 1, 1, 1, 1)
        self.maxSPSPN = QtWidgets.QSpinBox(self.gridFrame_4)
        self.maxSPSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.maxSPSPN.setMaximum(9999)
        self.maxSPSPN.setObjectName("maxSPSPN")
        self.gridLayout_2.addWidget(self.maxSPSPN, 2, 2, 1, 1)
        self.maxSPSPN_2 = QtWidgets.QSpinBox(self.gridFrame_4)
        self.maxSPSPN_2.setAlignment(QtCore.Qt.AlignCenter)
        self.maxSPSPN_2.setMaximum(9999)
        self.maxSPSPN_2.setObjectName("maxSPSPN_2")
        self.gridLayout_2.addWidget(self.maxSPSPN_2, 3, 2, 1, 1)
        self.curPTsLAB = QtWidgets.QLabel(self.gridFrame_4)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.curPTsLAB.setFont(font)
        self.curPTsLAB.setAlignment(QtCore.Qt.AlignCenter)
        self.curPTsLAB.setObjectName("curPTsLAB")
        self.gridLayout_2.addWidget(self.curPTsLAB, 0, 1, 1, 1)
        self.blank = QtWidgets.QLabel(self.gridFrame_4)
        self.blank.setText("")
        self.blank.setObjectName("blank")
        self.gridLayout_2.addWidget(self.blank, 0, 0, 1, 1)
        self.gridFrame_5 = QtWidgets.QFrame(self.comtruSec)
        self.gridFrame_5.setGeometry(QtCore.QRect(0, 150, 411, 221))
        self.gridFrame_5.setObjectName("gridFrame_5")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridFrame_5)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.defSCRSPN = QtWidgets.QSpinBox(self.gridFrame_5)
        self.defSCRSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.defSCRSPN.setMinimum(0)
        self.defSCRSPN.setProperty("value", 10)
        self.defSCRSPN.setObjectName("defSCRSPN")
        self.gridLayout_3.addWidget(self.defSCRSPN, 0, 3, 1, 1)
        self.defLab = QtWidgets.QLabel(self.gridFrame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.defLab.setFont(font)
        self.defLab.setAlignment(QtCore.Qt.AlignCenter)
        self.defLab.setObjectName("defLab")
        self.gridLayout_3.addWidget(self.defLab, 0, 2, 1, 1)
        self.initSCRSPN = QtWidgets.QSpinBox(self.gridFrame_5)
        self.initSCRSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.initSCRSPN.setMinimum(0)
        self.initSCRSPN.setProperty("value", 10)
        self.initSCRSPN.setObjectName("initSCRSPN")
        self.gridLayout_3.addWidget(self.initSCRSPN, 0, 1, 1, 1)
        self.movBox = QtWidgets.QComboBox(self.gridFrame_5)
        self.movBox.setEditable(True)
        self.movBox.lineEdit().setAlignment(QtCore.Qt.AlignCenter)
        self.movBox.setObjectName("movBox")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.movBox.addItem("")
        self.gridLayout_3.addWidget(self.movBox, 2, 3, 1, 1)
        self.accLab = QtWidgets.QLabel(self.gridFrame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.accLab.setFont(font)
        self.accLab.setAlignment(QtCore.Qt.AlignCenter)
        self.accLab.setObjectName("accLab")
        self.gridLayout_3.addWidget(self.accLab, 2, 0, 1, 1)
        self.accSCRSPN = QtWidgets.QSpinBox(self.gridFrame_5)
        self.accSCRSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.accSCRSPN.setObjectName("accSCRSPN")
        self.gridLayout_3.addWidget(self.accSCRSPN, 2, 1, 1, 1)
        self.inspLab = QtWidgets.QLabel(self.gridFrame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.inspLab.setFont(font)
        self.inspLab.setAlignment(QtCore.Qt.AlignCenter)
        self.inspLab.setObjectName("inspLab")
        self.gridLayout_3.addWidget(self.inspLab, 3, 0, 1, 1)
        self.movLab = QtWidgets.QLabel(self.gridFrame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.movLab.setFont(font)
        self.movLab.setAlignment(QtCore.Qt.AlignCenter)
        self.movLab.setObjectName("movLab")
        self.gridLayout_3.addWidget(self.movLab, 2, 2, 1, 1)
        self.inspSCRSPN = QtWidgets.QSpinBox(self.gridFrame_5)
        self.inspSCRSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.inspSCRSPN.setObjectName("inspSCRSPN")
        self.gridLayout_3.addWidget(self.inspSCRSPN, 3, 1, 1, 1)
        self.hthLab = QtWidgets.QLabel(self.gridFrame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.hthLab.setFont(font)
        self.hthLab.setAlignment(QtCore.Qt.AlignCenter)
        self.hthLab.setObjectName("hthLab")
        self.gridLayout_3.addWidget(self.hthLab, 3, 2, 1, 1)
        self.maxliftLAB = QtWidgets.QLabel(self.gridFrame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.maxliftLAB.setFont(font)
        self.maxliftLAB.setAlignment(QtCore.Qt.AlignCenter)
        self.maxliftLAB.setObjectName("maxliftLAB")
        self.gridLayout_3.addWidget(self.maxliftLAB, 4, 2, 1, 1)
        self.hthBox = QtWidgets.QComboBox(self.gridFrame_5)
        self.hthBox.setEditable(True)
        self.hthBox.lineEdit().setAlignment(QtCore.Qt.AlignCenter)
        self.hthBox.setObjectName("hthBox")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.hthBox.addItem("")
        self.gridLayout_3.addWidget(self.hthBox, 3, 3, 1, 1)
        self.recovLab = QtWidgets.QLabel(self.gridFrame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.recovLab.setFont(font)
        self.recovLab.setAlignment(QtCore.Qt.AlignCenter)
        self.recovLab.setObjectName("recovLab")
        self.gridLayout_3.addWidget(self.recovLab, 4, 0, 1, 1)
        self.recSPN = QtWidgets.QSpinBox(self.gridFrame_5)
        self.recSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.recSPN.setProperty("value", 2)
        self.recSPN.setObjectName("recSPN")
        self.gridLayout_3.addWidget(self.recSPN, 4, 1, 1, 1)
        self.maxliftBox = QtWidgets.QComboBox(self.gridFrame_5)
        self.maxliftBox.setEditable(True)
        self.maxliftBox.lineEdit().setAlignment(QtCore.Qt.AlignCenter)
        self.maxliftBox.setObjectName("maxliftBox")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.maxliftBox.addItem("")
        self.gridLayout_3.addWidget(self.maxliftBox, 4, 3, 1, 1)
        self.initLab = QtWidgets.QLabel(self.gridFrame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.initLab.setFont(font)
        self.initLab.setAlignment(QtCore.Qt.AlignCenter)
        self.initLab.setObjectName("initLab")
        self.gridLayout_3.addWidget(self.initLab, 0, 0, 1, 1)
        self.durSec = QtWidgets.QFrame(self.centralwidget)
        self.durSec.setGeometry(QtCore.QRect(20, 660, 241, 141))
        self.durSec.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.durSec.setFrameShadow(QtWidgets.QFrame.Raised)
        self.durSec.setObjectName("durSec")
        self.secDurLab = QtWidgets.QLabel(self.durSec)
        self.secDurLab.setGeometry(QtCore.QRect(0, 0, 241, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.secDurLab.setFont(font)
        self.secDurLab.setMouseTracking(True)
        self.secDurLab.setTabletTracking(True)
        self.secDurLab.setScaledContents(True)
        self.secDurLab.setAlignment(QtCore.Qt.AlignCenter)
        self.secDurLab.setObjectName("secDurLab")

        self.durSRHLE = QtWidgets.QLineEdit(self.durSec)
        self.durSRHLE.setGeometry(QtCore.QRect(0, 20, 241, 20))
        self.durSRHLE.setInputMask("")
        self.durSRHLE.setText("")
        self.durSRHLE.setCursorPosition(0)
        self.durSRHLE.setAlignment(QtCore.Qt.AlignCenter)
        self.durSRHLE.setDragEnabled(False)
        self.durSRHLE.setClearButtonEnabled(True)
        self.durSRHLE.setObjectName("durSRHLE")
        self.durSRHLE.returnPressed.connect(self.duralisting)
        self.duracompleter = QtWidgets.QCompleter(durability_names)
        self.duracompleter.setCaseSensitivity(False)
        self.durSRHLE.setCompleter(self.duracompleter)

        self.gridFrame_2 = QtWidgets.QFrame(self.durSec)
        self.gridFrame_2.setGeometry(QtCore.QRect(0, 40, 241, 31))
        self.gridFrame_2.setObjectName("gridFrame_2")
        self.durGrid = QtWidgets.QGridLayout(self.gridFrame_2)
        self.durGrid.setSpacing(-4)
        self.durGrid.setObjectName("durGrid")
        self.resLab = QtWidgets.QLabel(self.gridFrame_2)
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.resLab.setFont(font)
        self.resLab.setAlignment(QtCore.Qt.AlignCenter)
        self.resLab.setObjectName("resLab")
        self.durGrid.addWidget(self.resLab, 0, 1, 1, 1)
        self.durLab = QtWidgets.QLabel(self.gridFrame_2)
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.durLab.setFont(font)
        self.durLab.setAlignment(QtCore.Qt.AlignCenter)
        self.durLab.setObjectName("durLab")
        self.durGrid.addWidget(self.durLab, 0, 0, 1, 1)
        self.invLab = QtWidgets.QLabel(self.gridFrame_2)
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.invLab.setFont(font)
        self.invLab.setAlignment(QtCore.Qt.AlignCenter)
        self.invLab.setObjectName("invLab")
        self.durGrid.addWidget(self.invLab, 0, 2, 1, 1)
        self.durScroll = QtWidgets.QScrollArea(self.durSec)
        self.durScroll.setGeometry(QtCore.QRect(0, 70, 241, 71))
        self.durScroll.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.durScroll.setFrameShadow(QtWidgets.QFrame.Plain)
        self.durScroll.setWidgetResizable(True)
        self.durScroll.setObjectName("durScroll")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 239, 69))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.durScroll.setWidget(self.scrollAreaWidgetContents_2)
        self.genSec = QtWidgets.QFrame(self.centralwidget)
        self.genSec.setGeometry(QtCore.QRect(240, 10, 431, 151))
        self.genSec.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.genSec.setFrameShadow(QtWidgets.QFrame.Raised)
        self.genSec.setObjectName("genSec")
        self.secGenLab = QtWidgets.QLabel(self.genSec)
        self.secGenLab.setGeometry(QtCore.QRect(0, 0, 431, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.secGenLab.setFont(font)
        self.secGenLab.setAlignment(QtCore.Qt.AlignCenter)
        self.secGenLab.setObjectName("secGenLab")
        self.codeLN = QtWidgets.QLineEdit(self.genSec)
        self.codeLN.setGeometry(QtCore.QRect(0, 30, 191, 20))
        self.codeLN.setAlignment(QtCore.Qt.AlignCenter)
        self.codeLN.setClearButtonEnabled(True)
        self.codeLN.setObjectName("codeLN")
        self.legalLN = QtWidgets.QLineEdit(self.genSec)
        self.legalLN.setGeometry(QtCore.QRect(0, 60, 191, 20))
        self.legalLN.setAlignment(QtCore.Qt.AlignCenter)
        self.legalLN.setClearButtonEnabled(True)
        self.legalLN.setObjectName("legalLN")
        self.proLN1 = QtWidgets.QLineEdit(self.genSec)
        self.proLN1.setGeometry(QtCore.QRect(0, 90, 91, 20))
        self.proLN1.setAlignment(QtCore.Qt.AlignCenter)
        self.proLN1.setClearButtonEnabled(True)
        self.proLN1.setObjectName("proLN1")
        self.dividerLab = QtWidgets.QLabel(self.genSec)
        self.dividerLab.setGeometry(QtCore.QRect(90, 90, 21, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.dividerLab.setFont(font)
        self.dividerLab.setAlignment(QtCore.Qt.AlignCenter)
        self.dividerLab.setObjectName("dividerLab")
        self.proLN2 = QtWidgets.QLineEdit(self.genSec)
        self.proLN2.setGeometry(QtCore.QRect(110, 90, 81, 20))
        self.proLN2.setAlignment(QtCore.Qt.AlignCenter)
        self.proLN2.setClearButtonEnabled(True)
        self.proLN2.setObjectName("proLN2")
        self.pwrSettingBox = QtWidgets.QComboBox(self.genSec)
        self.pwrSettingBox.setGeometry(QtCore.QRect(0, 120, 191, 22))
        self.pwrSettingBox.setEditable(True)
        self.pwrSettingBox.lineEdit().setAlignment(QtCore.Qt.AlignCenter)
        self.pwrSettingBox.setObjectName("pwrSettingBox")
        self.pwrSettingBox.addItem("")
        self.pwrSettingBox.addItem("")
        self.pwrSettingBox.addItem("")
        self.pwrSettingBox.addItem("")
        self.pwrSettingBox.addItem("")
        self.pwrSettingBox.addItem("")
        self.pwrSettingBox.currentIndexChanged.connect(self.pwrSetting)
        self.lvlLab = QtWidgets.QLabel(self.genSec)
        self.lvlLab.setGeometry(QtCore.QRect(250, 30, 81, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.lvlLab.setFont(font)
        self.lvlLab.setAlignment(QtCore.Qt.AlignCenter)
        self.lvlLab.setObjectName("lvlLab")
        self.xpLab = QtWidgets.QLabel(self.genSec)
        self.xpLab.setGeometry(QtCore.QRect(250, 60, 81, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.xpLab.setFont(font)
        self.xpLab.setAlignment(QtCore.Qt.AlignCenter)
        self.xpLab.setObjectName("xpLab")
        self.tpLab = QtWidgets.QLabel(self.genSec)
        self.tpLab.setGeometry(QtCore.QRect(240, 90, 91, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.tpLab.setFont(font)
        self.tpLab.setAlignment(QtCore.Qt.AlignCenter)
        self.tpLab.setObjectName("tpLab")
        self.heroPtsLab = QtWidgets.QLabel(self.genSec)
        self.heroPtsLab.setGeometry(QtCore.QRect(250, 120, 81, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.heroPtsLab.setFont(font)
        self.heroPtsLab.setAlignment(QtCore.Qt.AlignCenter)
        self.heroPtsLab.setObjectName("heroPtsLab")
        self.lvlSPN = QtWidgets.QSpinBox(self.genSec)
        self.lvlSPN.setGeometry(QtCore.QRect(341, 30, 51, 22))
        self.lvlSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.lvlSPN.setObjectName("lvlSPN")
        self.xpSPN = QtWidgets.QSpinBox(self.genSec)
        self.xpSPN.setGeometry(QtCore.QRect(340, 60, 51, 22))
        self.xpSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.xpSPN.setObjectName("xpSPN")
        self.xpSPN.setMaximum(99999999)
        self.xpSPN.valueChanged.connect(lambda: calculateLvls(self.xpSPN.value(), self))
        self.xpSPN.editingFinished.connect(lambda: calculateLvls(self.xpSPN.value(), self))
        self.tpSPN = QtWidgets.QSpinBox(self.genSec)
        self.tpSPN.setGeometry(QtCore.QRect(340, 90, 51, 22))
        self.tpSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.tpSPN.setObjectName("tpSPN")
        self.tpSPN.valueChanged.connect(self.tpGains)
        self.heroPtsSPN = QtWidgets.QSpinBox(self.genSec)
        self.heroPtsSPN.setGeometry(QtCore.QRect(340, 120, 51, 22))
        self.heroPtsSPN.setAlignment(QtCore.Qt.AlignCenter)
        self.heroPtsSPN.setMaximum(3)
        self.heroPtsSPN.setObjectName("heroPtsSPN")
        self.notesBut = QtWidgets.QPushButton(self.centralwidget)
        self.notesBut.setGeometry(QtCore.QRect(127, 50, 75, 23))
        self.notesBut.setObjectName("notesBut")
        self.notesBut.clicked.connect(lambda: self.comingsoon())
        self.SettingsBut = QtWidgets.QPushButton(self.centralwidget)
        self.SettingsBut.setGeometry(QtCore.QRect(40, 100, 161, 25))
        self.SettingsBut.setObjectName("SettingsBut")
        self.SettingsBut.clicked.connect(lambda: self.comingsoon())
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.NewHeroBut, self.SaveHeroBut)
        MainWindow.setTabOrder(self.SaveHeroBut, self.LoadSheetBut)
        MainWindow.setTabOrder(self.LoadSheetBut, self.RanGenBut)
        MainWindow.setTabOrder(self.RanGenBut, self.ExitBut)
        MainWindow.setTabOrder(self.ExitBut, self.pwrSRHLE)
        MainWindow.setTabOrder(self.pwrSRHLE, self.pwrArea)
        MainWindow.setTabOrder(self.pwrArea, self.abiTXT)
        MainWindow.setTabOrder(self.abiTXT, self.unPowAGLSPN)
        MainWindow.setTabOrder(self.unPowAGLSPN, self.powAGLSPN)
        MainWindow.setTabOrder(self.powAGLSPN, self.unpowCHASPN)
        MainWindow.setTabOrder(self.unpowCHASPN, self.powCHASPN)
        MainWindow.setTabOrder(self.powCHASPN, self.unpowINTSPN)
        MainWindow.setTabOrder(self.unpowINTSPN, self.powINTSPN)
        MainWindow.setTabOrder(self.powINTSPN, self.unpowSENSPN)
        MainWindow.setTabOrder(self.unpowSENSPN, self.powSENSPN)
        MainWindow.setTabOrder(self.powSENSPN, self.unpowSPDSPN)
        MainWindow.setTabOrder(self.unpowSPDSPN, self.powSPDSPN)
        MainWindow.setTabOrder(self.powSPDSPN, self.unpowSTASPN)
        MainWindow.setTabOrder(self.unpowSTASPN, self.powSTASPN)
        MainWindow.setTabOrder(self.powSTASPN, self.unpowSTRSPN)
        MainWindow.setTabOrder(self.unpowSTRSPN, self.powSTRSPN)
        MainWindow.setTabOrder(self.powSTRSPN, self.curHPSPN)
        MainWindow.setTabOrder(self.curHPSPN, self.maxHPSPN)
        MainWindow.setTabOrder(self.maxHPSPN, self.curSPSPN)
        MainWindow.setTabOrder(self.curSPSPN, self.maxSPSPN)
        MainWindow.setTabOrder(self.maxSPSPN, self.curAPSPN)
        MainWindow.setTabOrder(self.curAPSPN, self.maxSPSPN_2)
        MainWindow.setTabOrder(self.maxSPSPN_2, self.initSCRSPN)
        MainWindow.setTabOrder(self.initSCRSPN, self.defSCRSPN)
        MainWindow.setTabOrder(self.defSCRSPN, self.accSCRSPN)
        MainWindow.setTabOrder(self.accSCRSPN, self.movBox)
        MainWindow.setTabOrder(self.movBox, self.inspSCRSPN)
        MainWindow.setTabOrder(self.inspSCRSPN, self.hthBox)
        MainWindow.setTabOrder(self.hthBox, self.recSPN)
        MainWindow.setTabOrder(self.recSPN, self.maxliftBox)
        MainWindow.setTabOrder(self.maxliftBox, self.durSRHLE)
        MainWindow.setTabOrder(self.durSRHLE, self.durScroll)

        self.unpowAGLedit, self.powAGLedit = False, False
        self.unpowCHAedit, self.powCHAedit = False, False
        self.unpowINTedit, self.powINTedit = False, False
        self.unpowSENedit, self.powSENedit = False, False
        self.unpowSPDedit, self.powSPDedit = False, False
        self.unpowSTAedit, self.powSTAedit = False, False
        self.unpowSTRedit, self.powSTRedit = False, False

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Legends A Superhero Character Builder"))
        self.NewHeroBut.setText(_translate("MainWindow", "New Hero"))
        self.SaveHeroBut.setText(_translate("MainWindow", "Save Hero"))
        self.LoadSheetBut.setText(_translate("MainWindow", "Load Sheet"))
        self.RanGenBut.setText(_translate("MainWindow", "Random Character"))
        self.ExitBut.setText(_translate("MainWindow", "Exit"))
        self.secAbiLab.setText(_translate("MainWindow", "Section C: Abilities"))
        self.abiTXT.setPlaceholderText(_translate("MainWindow", "Ability Notes Here"))
        self.secPwrLab.setText(_translate("MainWindow", "Section B: Powers"))
        self.pwrSRHLE.setPlaceholderText(_translate("MainWindow", "Search for Powers Here"))
        self.secSKLLab.setText(_translate("MainWindow", "Section D: Skills"))
        self.intLab.setText(_translate("MainWindow", "Intelligence"))
        self.spdLab.setText(_translate("MainWindow", "Speed"))
        self.senLab.setText(_translate("MainWindow", "Senses"))
        self.staLab.setText(_translate("MainWindow", "Stamina"))
        self.strLab.setText(_translate("MainWindow", "Strength"))
        self.unpowLab.setText(_translate("MainWindow", "Unpowered"))
        self.skillLab.setText(_translate("MainWindow", "Skill"))
        self.powLab.setText(_translate("MainWindow", "Powered"))
        self.agiLab.setText(_translate("MainWindow", "Agility"))
        self.chaLab.setText(_translate("MainWindow", "Charisma"))
        self.secComAttLab.setText(_translate("MainWindow", "Section E: Combat Attributes"))
        self.maxPTsLAB.setText(_translate("MainWindow", "Maximum"))
        self.hitPTsLAB.setText(_translate("MainWindow", "Hit Points"))
        self.staPTsLAB.setText(_translate("MainWindow", "Stamina Points"))
        self.armorPTsLAB.setText(_translate("MainWindow", "Armour Points"))
        self.curPTsLAB.setText(_translate("MainWindow", "Current"))
        self.defLab.setText(_translate("MainWindow", "Defense Score"))
        self.movBox.setItemText(0, _translate("MainWindow", "20 km/h"))
        self.movBox.setItemText(1, _translate("MainWindow", "25 km/h"))
        self.movBox.setItemText(2, _translate("MainWindow", "30 km/h"))
        self.movBox.setItemText(3, _translate("MainWindow", "35 km/h"))
        self.movBox.setItemText(4, _translate("MainWindow", "40 km/h"))
        self.movBox.setItemText(5, _translate("MainWindow", "60 km/h"))
        self.movBox.setItemText(6, _translate("MainWindow", "65 km/h"))
        self.movBox.setItemText(7, _translate("MainWindow", "75 km/h"))
        self.movBox.setItemText(8, _translate("MainWindow", "80 km/h"))
        self.movBox.setItemText(9, _translate("MainWindow", "90 km/h"))
        self.movBox.setItemText(10, _translate("MainWindow", "100 km/h"))
        self.movBox.setItemText(11, _translate("MainWindow", "110 km/h"))
        self.movBox.setItemText(12, _translate("MainWindow", "115 km/h"))
        self.movBox.setItemText(13, _translate("MainWindow", "120 km/h"))
        self.accLab.setText(_translate("MainWindow", "Accuracy Bonus"))
        self.inspLab.setText(_translate("MainWindow", "Inspiration Bonus"))
        self.movLab.setText(_translate("MainWindow", "Movement Speed"))
        self.hthLab.setText(_translate("MainWindow", "Hand to Hand Damage"))
        self.maxliftLAB.setText(_translate("MainWindow", "Maximum Lift"))
        self.hthBox.setItemText(0, _translate("MainWindow", "0"))
        self.hthBox.setItemText(1, _translate("MainWindow", "1d4"))
        self.hthBox.setItemText(2, _translate("MainWindow", "1d4+1"))
        self.hthBox.setItemText(3, _translate("MainWindow", "1d6"))
        self.hthBox.setItemText(4, _translate("MainWindow", "1d6+1"))
        self.hthBox.setItemText(5, _translate("MainWindow", "1d8"))
        self.hthBox.setItemText(6, _translate("MainWindow", "1d8+1"))
        self.hthBox.setItemText(7, _translate("MainWindow", "1d10"))
        self.hthBox.setItemText(8, _translate("MainWindow", "1d10+1"))
        self.hthBox.setItemText(9, _translate("MainWindow", "1d10+2"))
        self.hthBox.setItemText(10, _translate("MainWindow", "1d10+3"))
        self.hthBox.setItemText(11, _translate("MainWindow", "1d10+4"))
        self.hthBox.setItemText(12, _translate("MainWindow", "2d10"))
        self.hthBox.setItemText(13, _translate("MainWindow", "2d10+1"))
        self.hthBox.setItemText(14, _translate("MainWindow", "2d10+2"))
        self.hthBox.setItemText(15, _translate("MainWindow", "2d10+3"))
        self.hthBox.setItemText(16, _translate("MainWindow", "2d10+4"))
        self.hthBox.setItemText(17, _translate("MainWindow", "3d10"))
        self.hthBox.setItemText(18, _translate("MainWindow", "3d10+1"))
        self.hthBox.setItemText(19, _translate("MainWindow", "3d10+2"))
        self.hthBox.setItemText(20, _translate("MainWindow", "3d10+3"))
        self.hthBox.setItemText(21, _translate("MainWindow", "3d10+4"))
        self.hthBox.setItemText(22, _translate("MainWindow", "3d10+5"))
        self.recovLab.setText(_translate("MainWindow", "Recoveries"))
        self.maxliftBox.setItemText(0, _translate("MainWindow", "5 KG"))
        self.maxliftBox.setItemText(1, _translate("MainWindow", "10 KG"))
        self.maxliftBox.setItemText(2, _translate("MainWindow", "20 KG"))
        self.maxliftBox.setItemText(3, _translate("MainWindow", "30 KG"))
        self.maxliftBox.setItemText(4, _translate("MainWindow", "40 KG"))
        self.maxliftBox.setItemText(5, _translate("MainWindow", "50 KG"))
        self.maxliftBox.setItemText(6, _translate("MainWindow", "60 KG"))
        self.maxliftBox.setItemText(7, _translate("MainWindow", "70 KG"))
        self.maxliftBox.setItemText(8, _translate("MainWindow", "80 KG"))
        self.maxliftBox.setItemText(9, _translate("MainWindow", "90 KG"))
        self.maxliftBox.setItemText(10, _translate("MainWindow", "100 KG"))
        self.maxliftBox.setItemText(11, _translate("MainWindow", "200 KG"))
        self.maxliftBox.setItemText(12, _translate("MainWindow", "300 KG"))
        self.maxliftBox.setItemText(13, _translate("MainWindow", "400 KG"))
        self.maxliftBox.setItemText(14, _translate("MainWindow", "500 KG"))
        self.maxliftBox.setItemText(15, _translate("MainWindow", "1000 KG"))
        self.maxliftBox.setItemText(16, _translate("MainWindow", "2000 KG"))
        self.maxliftBox.setItemText(17, _translate("MainWindow", "3000 KG"))
        self.maxliftBox.setItemText(18, _translate("MainWindow", "4000 KG"))
        self.maxliftBox.setItemText(19, _translate("MainWindow", "5000 KG"))
        self.maxliftBox.setItemText(20, _translate("MainWindow", "6000 KG"))
        self.maxliftBox.setItemText(21, _translate("MainWindow", "7000 KG"))
        self.maxliftBox.setItemText(22, _translate("MainWindow", "8000 KG"))
        self.maxliftBox.setItemText(23, _translate("MainWindow", "9000 KG"))
        self.maxliftBox.setItemText(24, _translate("MainWindow", "10000 KG"))
        self.maxliftBox.setItemText(25, _translate("MainWindow", "15000 KG"))
        self.maxliftBox.setItemText(26, _translate("MainWindow", "20000 KG"))
        self.maxliftBox.setItemText(27, _translate("MainWindow", "30000 KG"))
        self.maxliftBox.setItemText(28, _translate("MainWindow", "40000 KG"))
        self.maxliftBox.setItemText(29, _translate("MainWindow", "50000 KG"))
        self.initLab.setText(_translate("MainWindow", "Initiative Score"))
        self.secDurLab.setText(_translate("MainWindow", "Section F: Durability"))
        self.durSRHLE.setPlaceholderText(_translate("MainWindow", "Search For Durabilities Here"))
        self.resLab.setText(_translate("MainWindow", "Resistant"))
        self.durLab.setText(_translate("MainWindow", "Durability"))
        self.invLab.setText(_translate("MainWindow", "Invulnerable"))
        self.secGenLab.setText(_translate("MainWindow", "Section A: General Information"))
        self.codeLN.setPlaceholderText(_translate("MainWindow", "Code Name"))
        self.legalLN.setPlaceholderText(_translate("MainWindow", "Legal Name"))
        self.proLN1.setPlaceholderText(_translate("MainWindow", "Pronoun"))
        self.dividerLab.setText(_translate("MainWindow", "/"))
        self.proLN2.setPlaceholderText(_translate("MainWindow", "Pronoun"))
        self.pwrSettingBox.setCurrentText(_translate("MainWindow", "Select Your Power Setting"))
        self.pwrSettingBox.setItemText(0, _translate("MainWindow", "Select Your Power Setting"))
        self.pwrSettingBox.setItemText(1, _translate("MainWindow", "Low Power Setting"))
        self.pwrSettingBox.setItemText(2, _translate("MainWindow", "Medium Power Setting"))
        self.pwrSettingBox.setItemText(3, _translate("MainWindow", "High Power Setting"))
        self.pwrSettingBox.setItemText(4, _translate("MainWindow", "Godly Power Setting"))
        self.pwrSettingBox.setItemText(5, _translate("MainWindow", "Custom Power Setting"))
        self.lvlLab.setText(_translate("MainWindow", "Level:"))
        self.xpLab.setText(_translate("MainWindow", "Current XP"))
        self.tpLab.setText(_translate("MainWindow", "Training Points"))
        self.heroPtsLab.setText(_translate("MainWindow", "Hero Points"))
        self.notesBut.setText(_translate("MainWindow", "Notes"))
        self.SettingsBut.setText(_translate("MainWindow", "Settings"))

    def connectSpinboxSigs(self):
        self.unPowAGLSPN.valueChanged.connect(self.update_all_related_stats)
        self.powAGLSPN.valueChanged.connect(self.update_all_related_stats)
        self.unpowCHASPN.valueChanged.connect(self.update_all_related_stats)
        self.powCHASPN.valueChanged.connect(self.update_all_related_stats)
        self.unpowINTSPN.valueChanged.connect(self.update_all_related_stats)
        self.powINTSPN.valueChanged.connect(self.update_all_related_stats)
        self.unpowSENSPN.valueChanged.connect(self.update_all_related_stats)
        self.powSENSPN.valueChanged.connect(self.update_all_related_stats)
        self.unpowSPDSPN.valueChanged.connect(self.update_all_related_stats)
        self.powSPDSPN.valueChanged.connect(self.update_all_related_stats)
        self.unpowSTASPN.valueChanged.connect(self.update_all_related_stats)
        self.powSTASPN.valueChanged.connect(self.update_all_related_stats)
        self.unpowSTRSPN.valueChanged.connect(self.update_all_related_stats)
        self.powSTRSPN.valueChanged.connect(self.update_all_related_stats)

    def update_all_related_stats(self):
        self.skillCalAGL()
        self.wrapperIni()
        self.trueunAGL()
        self.trueAGL()
        self.skillcalsCHA()
        self.skillcalsINT()
        self.wrapperAcc()
        self.trueunINT()
        self.trueINT()
        self.skillcalsSEN()
        self.wrapperDef()
        self.trueunSEN()
        self.trueSen()
        self.skillcalsSPD()
        self.trueunSPD()
        self.trueSPD()
        self.skillcalsSTA()
        self.wrapperHPSP()
        self.trueunSTA()
        self.trueSTA()
        self.skillcalsSTR()
        self.trueunSTR()
        self.trueSTR()

    # TODO: Works!
    pwrPTs, sklPTs = 0, 0
    def tpGains(self):
        self.tpPTs = self.tpSPN.value()

    def show_statstracker(self, pwrPTs, sklPTs):
        if self.statstracker is None:
            self.statstracker = StatsTracker()
        self.statstracker.powerPtsTrack.setText(f"Power Points: " + str(pwrPTs))
        self.statstracker.skillPtsTrack.setText(f"Skill Points: " + str(sklPTs))
        self.statstracker.show()

    # TODO: Low to Godly works, Custom is still needing work.
    def pwrSetting(self):
        initialSklPTs = 63
        if self.pwrSettingBox.currentText() == "Low Power Setting":
            low = 5
            self.curHPSPN.setValue(low)
            self.maxHPSPN.setValue(low)  # type: ignore
            self.curSPSPN.setValue(low)  # type: ignore
            self.maxSPSPN.setValue(low)
            self.pwrPTs = 4
            self.sklPTs = 10
            self.totalSklPTs = self.sklPTs + initialSklPTs
            self.heroPtsSPN.setMaximum(1)
            self.show_statstracker(self.pwrPTs, self.sklPTs)
            return low
        elif self.pwrSettingBox.currentText() == "Medium Power Setting":
            medium = 10
            self.curHPSPN.setValue(medium)
            self.maxHPSPN.setValue(medium)  # type: ignore
            self.curSPSPN.setValue(medium)  # type: ignore
            self.maxSPSPN.setValue(medium)
            self.pwrPTs = 6
            self.sklPTs = 15
            self.totalSklPTs = self.sklPTs + initialSklPTs
            self.heroPtsSPN.setMaximum(2)
            self.show_statstracker(self.pwrPTs, self.sklPTs)
            return medium
        elif self.pwrSettingBox.currentText() == "High Power Setting":
            high = 15
            self.curHPSPN.setValue(high)
            self.maxHPSPN.setValue(high)  # type: ignore
            self.curSPSPN.setValue(high)  # type: ignore
            self.maxSPSPN.setValue(high)
            self.pwrPTs = 8
            self.sklPTs = 20
            self.totalSklPTs = self.sklPTs + initialSklPTs
            self.heroPtsSPN.setMaximum(3)
            self.show_statstracker(self.pwrPTs, self.sklPTs)
            return high
        elif self.pwrSettingBox.currentText() == "Godly Power Setting":
            godly = 20
            self.curHPSPN.setValue(godly)
            self.maxHPSPN.setValue(godly)  # type: ignore
            self.curSPSPN.setValue(godly)  # type: ignore
            self.maxSPSPN.setValue(godly)
            self.pwrPTs = 10
            self.sklPTs = 25
            self.totalSklPTs = self.sklPTs + initialSklPTs
            self.heroPtsSPN.setMaximum(4)
            self.show_statstracker(self.pwrPTs, self.sklPTs)
            return godly
        elif self.pwrSettingBox.currentText() == "Custom Power Setting":
            # Create a custom input dialog for Custom Setting
            while True:
                hitPTs, ok1 = QInputDialog.getInt(None, "Custom Setting", "Enter Starting Health: ")
                staPTs, ok2 = QInputDialog.getInt(None, "Custom Setting", "Enter Starting Stamina: ")
                pwrPTs, ok3 = QInputDialog.getInt(None, "Custom Setting", "Enter Power Points: ")
                sklPTs, ok4 = QInputDialog.getInt(None, "Custom Setting", "Enter Skill Points: ")
                heroPTs, ok5 = QInputDialog.getInt(None, "Custom Setting", "Enter Maximum Hero Points: ")

                if ok1 and ok2 and ok3 and ok4 and ok5:
                    # Set the values based on user input
                    self.curHPSPN.setValue(hitPTs)  # Customize as needed
                    self.maxHPSPN.setValue(hitPTs)  # Customize as needed
                    self.curSPSPN.setValue(staPTs)  # Customize as needed
                    self.maxSPSPN.setValue(staPTs)  # Customize as needed
                    self.pwrPTs = pwrPTs
                    self.sklPTs = sklPTs
                    self.totalSklPTs = self.sklPTs + initialSklPTs
                    self.heroPtsSPN.setMaximum(heroPTs)  # Customize as needed
                    self.show_statstracker(self.pwrPTs, self.sklPTs)
                    break
                else:
                    QMessageBox.warning(self,"Please Fille Out","Please fill out all fields before continuing.")

    # TODO: It works, needs to center the text and a delete button.
    def duralisting(self):
        if self.durSRHLE.text() == '':
            pass
        else:
            selectdur = self.durSRHLE.text()
            durWidget = QtWidgets.QWidget()

            # Create a horizontal layout for durability widget
            durLayout = QtWidgets.QHBoxLayout(durWidget)
            durLayout.setSpacing(1)

            # Add durability text label
            dur_label = QtWidgets.QLabel(selectdur)
            durLayout.addWidget(dur_label)

            # Add exclusive checkboxes
            checkbox1 = QtWidgets.QCheckBox("")
            checkbox1.setChecked(False)  # Set the initial state as needed
            checkbox1.setAutoExclusive(True)  # Make checkboxes exclusive
            durLayout.addWidget(checkbox1)

            checkbox2 = QtWidgets.QCheckBox("")
            checkbox2.setChecked(False)  # Set the initial state as needed
            checkbox2.setAutoExclusive(True)  # Make checkboxes exclusive
            durLayout.addWidget(checkbox2)

            # Add the durability widget to the list
            self.durability_widgets.append(durWidget)

            # Set layout for the durability widget
            durWidget.setLayout(durLayout)

            # Clear the input field
            self.durSRHLE.clear()

            # Clear the widget entirely


            # Update the scroll area with all durability widgets
            self.updateDurabilityScroll()

    def updateDurabilityScroll(self):
        # Create a container widget for durability widgets
        container = QtWidgets.QWidget()
        container_layout = QtWidgets.QVBoxLayout(container)
        container_layout.setSpacing(1)
        container_layout.setContentsMargins(1, 1, 1, 1)

        # Add durability widgets to the container layout
        for durWidget in self.durability_widgets:
            container_layout.addWidget(durWidget)

        # Set container widget as the widget for the scroll area
        self.durScroll.setWidget(container)

    def checkPointsSpent(self):
        if self.pwrPTs <= 0 and self.sklPTs <= 0:
            self.close()

    def close(self):
        QtWidgets.QApplication.quit()

    # TODO: Works, may need a new coat of paint.
    def powerlisting(self):
        power = self.pwrSRHLE.text().strip()  # Get the text from the input field and remove extra spaces
        pwrcost = self.calculatepwrtier(power)
        pwrpointcost = pwrcost[0]
        tppointcost = pwrcost[1]

        if power and power not in [self.pwrArea.item(i).text() for i in range(self.pwrArea.count())]:
            if self.pwrPTs >= pwrpointcost:
                self.pwrPTs -= pwrpointcost
            elif self.pwrPTs == 0 and self.tpPTs >= tppointcost:
                self.tpPTs -= tppointcost
            else:
                # Not enough Power or Training points to add the power
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Not Enough!")
                msg.setText("Not enough Power Points or Training Points.")
                msg.exec_()
                return
            item = QtWidgets.QListWidgetItem(power)  # Create a new item with the power text
            item.setTextAlignment(QtCore.Qt.AlignCenter)  # Centers item in the list
            self.pwrArea.addItem(item)  # Add the item to the QListWidget
            self.pwrSRHLE.clear()  # Clear the input field after adding the power
            self.show_statstracker(self.pwrPTs, self.sklPTs)
            self.checkPointsSpent()
        else:
            print("Power already exists in the list!")

    def deletePower(self, item):
        row = self.pwrArea.row(item)
        deletedpwrname = item.text()  # Getting the name of the deleted power

        deletedpwrtier = self.calculatepwrtier(deletedpwrname)  # Gets the tier of the deleted power

        # Refund the Power Points
        deletedpwrtier = self.calculatepwrtier(deletedpwrname)  # Finding the tier of the power
        ppRefund = int(deletedpwrtier.split()[0])
        self.pwrPTs += ppRefund

        # Updating the tracker
        if self.statstracker is not None:
            self.statstracker.powerPtsTrack.setText(f"Power Points: {self.pwrPTs}")

        # Removes the power from the list
        self.pwrArea.takeItem(row)
        self.checkPointsSpent()

    def calculatepwrtier(self, pwrname):
        tiers = [self.AtierPwrs, self.BtierPwrs, self.CtierPwrs]
        for tier in tiers:
            if pwrname in tier["Name"]:
                return tier["Cost"]
        return "Unknown Power, please select again."

    # WORKS! YAY!
    def newchar(self):
        self.codeLN.clear()
        self.legalLN.clear()
        self.proLN1.clear()
        self.proLN2.clear()
        self.pwrSettingBox.setCurrentIndex(0)

        self.lvlSPN.setValue(0)
        self.xpSPN.setValue(0)
        self.tpSPN.setValue(0)
        self.heroPtsSPN.setValue(0)

        self.pwrSRHLE.clear()
        self.pwrArea.clear()
        self.abiTXT.clear()

        self.unpowSPDSPN.setValue(0)
        self.unpowSTRSPN.setValue(0)
        self.unpowSTASPN.setValue(0)
        self.unpowCHASPN.setValue(0)
        self.unpowINTSPN.setValue(0)
        self.unPowAGLSPN.setValue(0)
        self.unpowSENSPN.setValue(0)
        self.powAGLSPN.setValue(0)
        self.powCHASPN.setValue(0)
        self.powINTSPN.setValue(0)
        self.powSENSPN.setValue(0)
        self.powSPDSPN.setValue(0)
        self.powSTASPN.setValue(0)
        self.powSTRSPN.setValue(0)

        self.curHPSPN.setValue(0)
        self.maxHPSPN.setValue(0)
        self.curSPSPN.setValue(0)
        self.maxSPSPN.setValue(0)

        self.initSCRSPN.setValue(10)
        self.defSCRSPN.setValue(10)
        self.accSCRSPN.setValue(0)
        self.movBox.setCurrentIndex(0)
        self.inspSCRSPN.setValue(0)
        self.hthBox.setCurrentIndex(0)
        self.recSPN.setValue(0)
        self.maxliftBox.setCurrentIndex(0)

        self.durSRHLE.clear()
        self.durability_widgets.clear()
        self.updateDurabilityScroll()

    # WORKS! YAY!
    def savchar(self):
        ability = self.abiTXT.toPlainText() if self.abiTXT else ""
        skills = {box.objectName(): box.value() for box in self.skillboxes}
        durabilities = []
        for durWidget in self.durability_widgets:
            try:
                dur_label = durWidget.findChild(QtWidgets.QLabel, "durLabelName")
                name = dur_label.text()
            except AttributeError:
                name = ""

            checkbox1, checkbox2 = durWidget.findChildren(QtWidgets.QCheckBox)
            state = {
                "name": name,
                "checkbox1": checkbox1.isChecked(),
                "checkbox2": checkbox2.isChecked()
            }
            durabilities.append(state)
        char = {
            "name": self.legalLN.text(),  #QLineEdit for name
            "codename": self.codeLN.text(),  #QLineEdit for codename
            "pro1": self.proLN1.text(),  #QLineEdit for pro1
            "pro2": self.proLN2.text(),  #QLineEdit for pro2
            "setting": self.pwrSettingBox.currentText(),  #QComboBox for setting
            "lvl": self.lvlSPN.value(),  #QSpinBox for level
            "xp": self.xpSPN.value(),  #QSpinBox for XP
            "tp": self.tpSPN.value(),  #QSpinBox for TP
            "hero": self.heroPtsSPN.value(),  #QSpinBox for Hero Points
            "pwrPTs": self.pwrPTs,  #Value for Power Points
            "sklPTs": self.sklPTs,  #Value for Skill Points
            "powers": [self.pwrArea.item(i).text() for i in range(self.pwrArea.count())],  #List of Powers
            "ability": ability,  #abiTXT for ability text box
            "skills": skills,  #A bunch of QSpinBoxes
            "hp": self.maxHPSPN.value(),  #QSpinBox for HP
            "sp": self.maxSPSPN.value(),  #QSpinBox for SP
            "ap": self.maxSPSPN_2.value(),  #QSpinBox for AP
            "ini": self.initSCRSPN.value(),  #QSpinBox for Initiative
            "def": self.defSCRSPN.value(),  #QSpinBox for Defense
            "acc": self.accSCRSPN.value(),  #QSpinBox for Accuracy
            "mov": self.movBox.currentText(),  #QComboBox for Movement
            "insp": self.inspSCRSPN.value(),  #QSpinBox for Inspiration
            "hth": self.hthBox.currentText(),  #QComboBox for Hand-to-Hand combat
            "recov": self.recSPN.value(),  #QSpinBox for Recovery
            "lift": self.maxliftBox.currentText(),  #QComboBox for Lift
            "duras": durabilities,
        }

        options = QFileDialog.Options()
        fileName, _ = QFileDialog.getSaveFileName(None,
                                                  "Save Character As",
                                                  "",
                                                  "JSON Files (*.json);;All Files (*)",
                                                  options=options)
        if fileName:
            with open(fileName, "w") as file:
                json.dump(char, file, indent=4)

    # WORKS! YAY!
    def loachar(self):
        options = QFileDialog.Options()
        fileName, _ = QFileDialog.getOpenFileName(None,
                                                  "Open Character File",
                                                  "",
                                                  "JSON Files (*.json);;All Files (*)",
                                                  options=options)
        if fileName:
            try:
                with open(fileName, "r") as file:
                    char = json.load(file)

                    # Restore QLineEdit texts
                    self.legalLN.setText(char.get("name", ""))
                    self.codeLN.setText(char.get("codename", ""))
                    self.proLN1.setText(char.get("pro1", ""))
                    self.proLN2.setText(char.get("pro2", ""))

                    # Restore QComboBox selections
                    self.pwrSettingBox.setCurrentText(char.get("setting", ""))
                    self.movBox.setCurrentText(char.get("mov", ""))
                    self.hthBox.setCurrentText(char.get("hth", ""))
                    self.maxliftBox.setCurrentText(char.get("lift", ""))

                    # Restore QSpinBox values
                    self.lvlSPN.setValue(char.get("lvl", 0))
                    self.xpSPN.setValue(char.get("xp", 0))
                    self.tpSPN.setValue(char.get("tp", 0))
                    self.heroPtsSPN.setValue(char.get("hero", 0))
                    self.maxHPSPN.setValue(char.get("hp", 0))
                    self.maxSPSPN.setValue(char.get("sp", 0))
                    self.maxSPSPN_2.setValue(char.get("ap", 0))
                    self.initSCRSPN.setValue(char.get("ini", 0))
                    self.defSCRSPN.setValue(char.get("def", 0))
                    self.accSCRSPN.setValue(char.get("acc", 0))
                    self.initSCRSPN.setValue(char.get("insp", 0))
                    self.recSPN.setValue(char.get("recov", 0))

                    # Restore custom attributes
                    self.pwrPTs = char.get("pwrPTs", self.pwrPTs)
                    self.sklPTs = char.get("sklPTs", self.sklPTs)
                    self.abiTXT.setPlainText(char["ability"])

                    # Restore QListWidget items
                    self.pwrArea.clear()
                    for power in char.get("powers", []):
                        self.pwrArea.addItem(power)

                    # Assuming durArea is a QListWidget for Durabilities
                    for dur_data in char.get("duras", []):
                        dur_label_text = dur_data["name"]
                        checkbox1_checked = dur_data["checkbox1"]
                        checkbox2_checked = dur_data["checkbox2"]

                    # Restore skill spinbox values
                    for box in self.skillboxes:
                        boxName = box.objectName()
                        box.setValue(char["skills"].get(boxName, box.value()))

                    self.updateSkillPts()

            except FileNotFoundError:
                pass

    # TODO: Make it. (10/17/2023)
    def genchar(self):
        # randomize a character(WEE!)
        return

    # TODO: Make it. (10/17/2023)
    def notepad(self):
        # Write a wholeass note keeper
        return

    # TODO: Make it. (10/17/2023)
    def preset(self):
        # Write settings thing.(Wee...)
        return

    # TODO: LETS GO! IT WORKS! BOOYA!
    def exitprogram(self):
        sys.exit(app.exec_())

    # TODO: Make it. (10/17/2023)
    def premades(self):
        # Go through and make it to where if people enter certain names it fills
        return

    def skillCalAGL(self):
        agi_values = {
            11: (1, 0),
            12: (1, 1),
            13: (2, 1),
            14: (2, 2),
            15: (3, 2),
            16: (3, 3),
            17: (4, 3),
            18: (4, 4),
            19: (5, 4),
            20: (5, 5),
            21: (6, 5),
            22: (6, 6),
            23: (7, 6),
            24: (7, 7),
            25: (8, 7),
            26: (8, 8),
            27: (9, 8),
            28: (9, 9),
            29: (10, 9),
            30: (15, 10),
        }

        unpowagi = self.unPowAGLSPN.value()
        powagi = self.powAGLSPN.value()

        agitot = max(unpowagi, powagi)
        self.AGI = True

        AGIinival, AGIdef = agi_values.get(agitot, (0, 0))

        return agitot, AGIinival, AGIdef

    def skillcalsCHA(self):
        cha_values = {
            12: 1,
            13: 1,
            14: 1,
            15: 2,
            16: 2,
            17: 2,
            18: 2,
            19: 2,
            20: 3,
            21: 3,
            22: 3,
            23: 3,
            24: 3,
            25: 4,
            26: 4,
            27: 4,
            28: 4,
            29: 4,
            30: 5
        }

        unpowcha = self.unpowCHASPN.value()
        powcha = self.powCHASPN.value()
        chatot = max(unpowcha, powcha)
        chaval = cha_values.get(chatot, 0)
        self.inspSCRSPN.setValue(chaval)

    def skillcalsINT(self):
        int_values = {
            12: 1,
            13: 1,
            14: 2,
            15: 2,
            16: 3,
            17: 3,
            18: 4,
            19: 4,
            20: 5,
            21: 5,
            22: 6,
            23: 6,
            24: 7,
            25: 7,
            26: 8,
            27: 8,
            28: 9,
            29: 9,
            30: 10
        }

        unpowint = self.unpowINTSPN.value()
        powint = self.powINTSPN.value()

        inttot = max(unpowint, powint)
        self.INT = True
        intAcc = int_values.get(inttot, 0)

        return inttot, intAcc

    def skillcalsSEN(self):
        sen_values = {
            11: (0, 1),
            12: (1, 1),
            13: (1, 2),
            14: (2, 2),
            15: (2, 3),
            16: (3, 3),
            17: (3, 4),
            18: (4, 4),
            19: (4, 5),
            20: (5, 5),
            21: (5, 6),
            22: (6, 6),
            23: (6, 7),
            24: (7, 7),
            25: (7, 8),
            26: (8, 8),
            27: (8, 9),
            28: (9, 9),
            29: (9, 10),
            30: (10, 15)
        }

        unpowsen = self.unpowSENSPN.value()
        powsen = self.powSENSPN.value()

        sentot = max(unpowsen, powsen)
        self.SEN = True
        senAcc, senDef = sen_values.get(sentot, (0, 0))

        return sentot, senAcc, senDef

    def skillcalsSPD(self):
        spd_values = {
            1: (0, 0),
            2: (0, 0),
            3: (0, 0),
            4: (0, 1),
            5: (0, 1),
            6: (0, 1),
            7: (0, 1),
            8: (0, 2),
            9: (0, 2),
            10: (0, 2),
            11: (1, 2),
            12: (2, 2),
            13: (3, 3),
            14: (4, 4),
            15: (5, 4),
            16: (6, 5),
            17: (7, 6),
            18: (8, 7),
            19: (9, 7),
            20: (10, 8),
            21: (11, 8),
            22: (12, 9),
            23: (13, 9),
            24: (14, 10),
            25: (15, 10),
            26: (16, 11),
            27: (17, 11),
            28: (18, 12),
            29: (19, 12),
            30: (20, 13)
        }

        unpowSPD = self.unpowSPDSPN.value()
        powSPD = self.powSPDSPN.value()

        SPDtot = max(unpowSPD, powSPD)
        self.SPD = True

        SPDinival, movval = spd_values.get(SPDtot, (0, 0))

        self.movBox.setCurrentIndex(movval)

        return SPDtot, SPDinival

    def skillcalsSTA(self):
        # These are just HP bonus totals
        sta_values = {
            10: 1,
            11: 2,
            12: 3,
            13: 4,
            14: 5,
            15: 6,
            16: 7,
            17: 8,
            18: 9,
            19: 10,
            20: 11,
            21: 12,
            22: 13,
            23: 14,
            24: 15,
            25: 16,
            26: 17,
            27: 18,
            28: 19,
            29: 20,
            30: 25
        }

        unpowSTA = self.unpowSTASPN.value()
        powSTA = self.powSTASPN.value()
        STAtot = max(unpowSTA, powSTA)
        self.STA = True

        Hitval = sta_values.get(STAtot, 0)

        return Hitval, STAtot

    def skillcalsSTR(self):
        str_values = {
            1: (0, 0, 0),
            2: (0, 1, 0),
            3: (0, 2, 0),
            4: (0, 3, 0),
            5: (0, 4, 0),
            6: (0, 5, 0),
            7: (0, 6, 0),
            8: (0, 7, 1),
            9: (0, 8, 1),
            10: (1, 9, 2),
            11: (2, 10, 3),
            12: (3, 11, 4),
            13: (4, 12, 5),
            14: (5, 13, 6),
            15: (6, 14, 7),
            16: (7, 15, 8),
            17: (8, 16, 9),
            18: (9, 17, 10),
            19: (10, 18, 11),
            20: (11, 19, 12),
            21: (12, 20, 13),
            22: (13, 21, 14),
            23: (14, 22, 15),
            24: (15, 23, 16),
            25: (16, 24, 17),
            26: (17, 25, 18),
            27: (18, 26, 19),
            28: (19, 27, 20),
            29: (20, 28, 21),
            30: (25, 29, 22)
        }

        unpowSTR = self.unpowSTRSPN.value()
        powSTR = self.powSTRSPN.value()

        STRtot = max(unpowSTR, powSTR)
        self.STR = True

        STRval, Lft, HtH = str_values.get(STRtot, (0, 0, 0))

        self.maxliftBox.setCurrentIndex(Lft)
        self.hthBox.setCurrentIndex(HtH)

        return STRtot, STRval, Lft, HtH

    # TODO: Okay, so this works as basic as possible so long as people do not change the Power Setting.
    def HPSP(self, agitot, SPDtot, inttot, STRtot, Hitval, STRval, STAtot, setVal):
        self.skillCalAGL()
        self.skillcalsSPD()
        self.skillcalsINT()
        self.skillcalsSTR()
        self.skillcalsSTA()

        if self.unpowAGLedit and self.powAGLedit \
                and self.unpowSPDedit and self.powSPDedit \
                and self.unpowINTedit and self.powINTedit \
                and self.unpowSTRedit and self.powSTRedit:
            hiSkill = max(agitot, SPDtot, inttot, STRtot)
            statot = hiSkill + STAtot + setVal
            self.curSPSPN.setValue(statot)
            self.maxSPSPN.setValue(statot)
        else:
            return

        if self.unpowSTAedit and self.powSTAedit and self.unpowSTRedit and self.powSTRedit:
            HPtot = Hitval + STRval + setVal
            self.curHPSPN.setValue(HPtot)
            self.maxHPSPN.setValue(HPtot)
        else:
            return

    # IT WORKS! 7/30/2024
    def Ini(self, agitot, AGIinival, SPDtot, SPDinival):
        self.skillcalsSPD()
        self.skillCalAGL()
        ini = 10

        if self.unpowSPDedit and self.powSPDedit and self.unpowAGLedit and self.powAGLedit:
            if agitot > SPDtot:
                inival = AGIinival
                inittotal = inival + ini
                self.initSCRSPN.setValue(inittotal)
            elif SPDtot < agitot:
                inival = SPDinival
                inittotal = inival + ini
                self.initSCRSPN.setValue(ini + inival)
            elif agitot == SPDtot:
                # Here because SPD gives the better score.
                inival = SPDinival
                inittotal = inival + ini
                self.initSCRSPN.setValue(ini + inival)

        else:
            return

    # IT WORKS! 7/30/2024
    def Def(self, agitot, AGIdef, sentot, senDef):
        self.skillCalAGL()
        self.skillcalsSEN()
        defe = 10
        defval = 0

        if self.unpowAGLedit and self.powAGLedit and self.unpowSENedit and self.powSENedit:
            if agitot > sentot:
                defval = AGIdef
                self.defSCRSPN.setValue(defe + defval)
            elif sentot < agitot:
                defval = senDef
                self.defSCRSPN.setValue(defe + defval)
            elif agitot == sentot:
                # Because this one will give you the bigger bump defense wise.
                defval = senDef
                self.defSCRSPN.setValue(defe + defval)
        else:
            return

    # IT WORKS! 7/30/2024
    def Acc(self, sentot, senAcc, inttot, intAcc):
        self.skillcalsSEN()
        self.skillcalsINT()
        acc = 0
        accval = 0

        if self.unpowSENedit and self.powSENedit and self.unpowINTedit and self.powINTedit:
            if inttot > sentot:
                accval = intAcc
                curAcc = self.accSCRSPN.value()
                self.accSCRSPN.setValue(acc + accval)
            elif sentot < inttot:
                accval = senAcc
                curAcc = self.accSCRSPN.value()
                self.accSCRSPN.setValue(acc + accval)
            elif sentot == inttot:
                # It's the same as Senses, it is literally here on a coin toss.
                accval = intAcc
                curAcc = self.accSCRSPN.value()
                self.accSCRSPN.setValue(acc + accval)
        else:
            return

    def wrapperIni(self):
        agitot, AGIinival, _ = self.skillCalAGL()
        SPDtot, SPDinival = self.skillcalsSPD()
        self.Ini(agitot, AGIinival, SPDtot, SPDinival)  # dummy value in 0

    def wrapperDef(self):
        agitot, AGIdef, _ = self.skillCalAGL()
        sentot, senDef, _ = self.skillcalsSEN()
        self.Def(agitot, AGIdef, sentot, senDef)  # dummy value in 0

    def wrapperAcc(self):
        sentot, senAcc, _ = self.skillcalsSEN()
        inttot, intAcc = self.skillcalsINT()
        self.Acc(sentot, senAcc, inttot, intAcc)  # dummy value in 0

    def wrapperHPSP(self):
        agitot, _, _ = self.skillCalAGL()
        SPDtot, _ = self.skillcalsSPD()
        inttot, _ = self.skillcalsINT()
        STRtot, STRval, _, _ = self.skillcalsSTR()
        Hitval, STAtot = self.skillcalsSTA()
        setVal = self.pwrSetting()
        if setVal is None:
            setVal = 0
        self.HPSP(agitot, SPDtot, inttot, STRtot, Hitval, STRval, STAtot, setVal)

    def trueunAGL(self):
        if not self.unpowAGLedit:
            self.unpowAGLedit = True

    def trueAGL(self):
        if not self.powAGLedit:
            self.powAGLedit = True

    def trueunINT(self):
        if not self.unpowINTedit:
            self.unpowINTedit = True

    def trueINT(self):
        if not self.powINTedit:
            self.powINTedit = True

    def trueunSEN(self):
        if not self.unpowSENedit:
            self.unpowSENedit = True

    def trueSen(self):
        if not self.powSENedit:
            self.powSENedit = True

    def trueunSPD(self):
        if not self.unpowSPDedit:
            self.unpowSPDedit = True

    def trueSPD(self):
        if not self.powSPDedit:
            self.powSPDedit = True

    def trueunSTA(self):
        if not self.unpowSTAedit:
            self.unpowSTAedit = True

    def trueSTA(self):
        if not self.powSTAedit:
            self.powSTAedit = True

    def trueunSTR(self):
        if not self.unpowSTRedit:
            self.unpowSTRedit = True

    def trueSTR(self):
        if not self.powSTRedit:
            self.powSTRedit = True

    def skillBoxes(self):
        self.skillboxes = [self.unPowAGLSPN, self.powAGLSPN,
                      self.unpowCHASPN, self.powCHASPN,
                      self.unpowINTSPN, self.powINTSPN,
                      self.unpowSENSPN, self.powSENSPN,
                      self.unpowSPDSPN, self.powSPDSPN,
                      self.unpowSTASPN, self.powSTASPN,
                      self.unpowSTRSPN, self.powSTRSPN]

        for skillbox in self.skillboxes:
            skillbox.valueChanged(self.trackSkillPoints)

    # TODO: Still need to do this right. It doesn't track Skill Points, nevermind actually doing level up properly.
    def trackSkillPoints(self):
        self.skillBoxes()

        print(self.totalSklPTs)

        self.sklPTs = max(0, self.sklPTs - usedPoints)
        self.updateSkillPts()
        self.checkPointsSpent()

    def updateSkillPts(self):
        if self.statstracker is not None:
            self.statstracker.skillPtsTrack.setText(f"Skill Points: {self.sklPTs}")

    def comingsoon(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle("Sorry!")
        msg.setText("Feature Coming Soon! Please get ahold of dev on Discord: echoofscholars")
        msg.exec_()

class StatsTracker(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Stats Tracker")
        self.setGeometry(100, 100, 200, 100)

        layout = QtWidgets.QVBoxLayout()
        self.powerPtsTrack = QtWidgets.QLabel("Power Points: ")
        layout.addWidget(self.powerPtsTrack)
        self.skillPtsTrack = QtWidgets.QLabel("Skill Points: ")
        layout.addWidget(self.skillPtsTrack)

        self.setLayout(layout)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
